package com.locker;

import java.io.*;
import java.util.*;
import java.util.Base64;

public class FileManager {
    private static final String FILE_NAME = "credentials.txt";

    public static void saveCredential(Credential credential) {
        try (FileWriter fw = new FileWriter(FILE_NAME, true)) {
            String line = encode(credential.getWebsite()) + "|" +
                          encode(credential.getUsername()) + "|" +
                          encode(credential.getPassword()) + "\n";
            fw.write(line);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static List<Credential> loadCredentials() {
        List<Credential> list = new ArrayList<>();
        File file = new File(FILE_NAME);
        if (!file.exists()) return list;

        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length == 3) {
                    list.add(new Credential(decode(parts[0]), decode(parts[1]), decode(parts[2])));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list;
    }

    public static void deleteCredential(String website) {
        List<Credential> creds = loadCredentials();
        creds.removeIf(c -> c.getWebsite().equalsIgnoreCase(website));
        try (FileWriter fw = new FileWriter(FILE_NAME)) {
            for (Credential c : creds) {
                fw.write(encode(c.getWebsite()) + "|" +
                         encode(c.getUsername()) + "|" +
                         encode(c.getPassword()) + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String encode(String data) {
        return Base64.getEncoder().encodeToString(data.getBytes());
    }

    private static String decode(String data) {
        return new String(Base64.getDecoder().decode(data));
    }
}
